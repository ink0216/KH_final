<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kh.em.albaya.board.model.mapper.ReviewBoardMapper">
	<!-- 게시판 종류 조회 -->
	<select id="selectBoardTypeList">
	SELECT REVIEW_BOARD_CODE "reviewBoardCode", REVIEW_BOARD_NAME "reviewBoardName"
	FROM BOARD_TYPE
	ORDER BY REVIEW_BOARD_CODE
	</select>

	<!-- 삭제 안된 게시글 수 조회 -->
	<select id="getListCount">
	SELECT COUNT(*) FROM "REVIEW_BOARD"
	WHERE BOARD_DEL_FL = 'N'
	AND REVIEW_BOARD_CODE = #{reviewBoardCode}
	</select>
	
	<!-- 특정 게시판 지정된 목록 조회 -->
	<select id="selectBoardList">
		SELECT REVIEW_BOARD_NO, REVIEW_TITLE, MEMBER_EMAIL, READ_COUNT,
	(SELECT COUNT(*) FROM "COMMENT" C
	WHERE C.REVIEW_BOARD_NO = B.REVIEW_BOARD_NO) COMMENT_COUNT,
	
	<![CDATA[ 
		CASE 
			WHEN SYSDATE-REVIEW_BOARD_WRITE_DATE < 1/24/60
			THEN FLOOR((SYSDATE-REVIEW_BOARD_WRITE_DATE)*24*60*60)||'초 전'
			
			WHEN SYSDATE-REVIEW_BOARD_WRITE_DATE <1/24
			THEN FLOOR((SYSDATE-REVIEW_BOARD_WRITE_DATE)*24*60)||'분 전'
			
			WHEN SYSDATE-REVIEW_BOARD_WRITE_DATE <1
			THEN FLOOR((SYSDATE-REVIEW_BOARD_WRITE_DATE)*24)||'시간 전'
			
			ELSE TO_CHAR(REVIEW_BOARD_WRITE_DATE, 'YYYY-MM-DD')
		END REVIEW_BOARD_WRITE_DATE 
		]]>
	FROM "REVIEW_BOARD" B
	JOIN "MEMBER" M USING (MEMBER_NO)
	WHERE BOARD_DEL_FL = 'N'
	AND REVIEW_BOARD_CODE = #{reviewBoardCode}
	ORDER BY REVIEW_BOARD_NO DESC
	</select>
	
	
	<!-- 검색 조건이 맞는 게시글 수 조회 -->
	<select id="getSearchCount">
		SELECT COUNT(*)
		FROM REVIEW_BOARD 
		WHERE BOARD_DEL_FL = 'N'
		AND REVIEW_BOARD_CODE = #{reviewBoardCode}
		<choose>
			<!-- 제목 검색 (key 값이 "t" 인 경우) -->
			<when test='key == "t"'>
				AND REVIEW_TITLE LIKE '%' || #{query} || '%'
			</when>
			
			<!-- 내용 검색 (key 값이 "c" 인 경우) -->
			<when test='key == "c"'>
				AND REVIEW_BOARD_CONTENT LIKE '%' || #{query} || '%'
			</when>
			
			<!-- 제목 + 내용 검색 (key 값이 "tc" 인 경우) -->
			<when test='key == "tc"'>
				AND ( 
					REVIEW_TITLE   LIKE '%' || #{query} || '%'
					OR  
					REVIEW_BOARD_CONTENT LIKE '%' || #{query} || '%'
				)
			</when>
		</choose>
	</select>
	
	
	<!--  검색 결과 목록 조회 -->
	<select id="selectSearchList">
		SELECT REVIEW_BOARD_NO, REVIEW_TITLE,
			   REVIEW_BOARD_WRITE_DATE, READ_COUNT, MEMBER_EMAIL
		FROM "REVIEW_BOARD" R
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND REVIEW_BOARD_CODE = #{reviewBoardCode}
		<choose>
			<!-- 제목 검색 (key 값이 "t" 인 경우) -->
			<when test='key == "t"'>
				AND REVIEW_TITLE LIKE '%' || #{query} || '%'
			</when>
			
			<!-- 내용 검색 (key 값이 "c" 인 경우) -->
			<when test='key == "c"'>
				AND REVIEW_BOARD_CONTENT LIKE '%' || #{query} || '%'
			</when>
			
			<!-- 제목 + 내용 검색 (key 값이 "tc" 인 경우) -->
			<when test='key == "tc"'>
				AND ( 
					REVIEW_TITLE   LIKE '%' || #{query} || '%'
					OR  
					REVIEW_BOARD_CONTENT LIKE '%' || #{query} || '%'
				)
			</when>
		</choose>
		ORDER BY REVIEW_BOARD_NO DESC
	</select>
	
	
	
	
	
	<!-- 게시글 상세 조회 -->
	<select id="selectOne">
		SELECT REVIEW_BOARD_NO , REVIEW_TITLE, REVIEW_BOARD_CONTENT,
				REVIEW_BOARD_CODE, READ_COUNT, MEMBER_NO,
				MEMBER_EMAIL,
				TO_CHAR(
					REVIEW_BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS'
					) REVIEW_BOARD_WRITE_DATE,  
				TO_CHAR(
					REVIEW_BOARD_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS'
					) REVIEW_BOARD_UPDATE_DATE
		FROM REVIEW_BOARD  
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND REVIEW_BOARD_CODE = #{reviewBoardCode}
		AND REVIEW_BOARD_NO = #{reviewBoardNo}
	</select>
	
	
	<!-- 상세 조회한 게시글 댓글 조회 -->
	<select id="">
		SELECT LEVEL, C.* 
			FROM
				(SELECT COMMENT_NO, COMMENT_CONTENT,
						  TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
						  REVIEW_BOARD_NO, MEMBER_NO, MEMBER_EMAIL,  PARENT_COMMENT_NO, COMMENT_DEL_FL
				FROM "COMMENT"
				JOIN MEMBER USING(MEMBER_NO)
				WHERE REVIEW_BOARD_NO = 2) C
		WHERE COMMENT_DEL_FL = 'N'
		OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
						WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
						AND COMMENT_DEL_FL = 'N')
		START WITH PARENT_COMMENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
		ORDER SIBLINGS BY COMMENT_NO;
	</select>

	
</mapper>
